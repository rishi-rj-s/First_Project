<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Order Checkout</title>
  <!-- Font Awesome Icons -->
  <script src="https://kit.fontawesome.com/42d5adcbca.js" crossorigin="anonymous"></script>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.0/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.0/dist/sweetalert2.all.min.js"></script>
  <style>
    body {
      background-color: #f8f9fa;
    }

    .order-details,
    .address-selection,
    .payment-method,
    .total-amount {
      background-color: #fff;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .btn-place-order {
      display: block;
      margin: 20px auto;
      width: 100%;
    }

    .object-fit-cover {
      object-fit: cover;
      height: 75px;
      width: 75px;
    }

    .banner-wrapper {
      background-color: black;
      padding: 10px;
    }

    .banner {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
    }

    .banner h1 {
      font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
      padding-left: 10px;
      margin-top: 0;
      color: white;
    }

    .form-outline-inline {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }

    .form-outline-inline input[type="search"] {
      width: 100%;
      margin-right: 5px;
    }

    .icons {
      align-items: center;
    }

    .icons a {
      margin-right: 10px;
    }

    @media (min-width: 768px) {
      .banner h1 {
        margin-bottom: 0;
      }

      .form-outline-inline input[type="search"] {
        width: auto;
        margin-right: 0;
      }

      .row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -15px;
        margin-left: -15px;
      }

      .col-half {
        flex: 0 0 50%;
        max-width: 50%;
        padding-right: 15px;
        padding-left: 15px;
      }

      /* Additional styles for medium and large screens */
      .col-md-6 {
        flex: 0 0 50%;
        max-width: 50%;
        padding-right: 15px;
        padding-left: 15px;
      }

      .col-lg-12 {
        flex: 0 0 100%;
        max-width: 100%;
        padding-right: 15px;
        padding-left: 15px;
      }
    }

    @media (max-width: 767px) {

      /* Adjustments for small screens */
      .col-half {
        flex: 0 0 100%;
        max-width: 100%;
        padding-right: 15px;
        padding-left: 15px;
      }
    }

    .btn-place-order {
      display: flex;
      justify-content: center;
      margin: 20px auto;
      width: 50%;
      /* Adjust the width as needed */
    }

    @media (max-width: 767px) {

      /* Additional styles for small screens */
      .btn-place-order {
        width: 100%;
        /* Full width on small screens */
      }
    }
  </style>
</head>

<body>
  <div class="banner-wrapper fixed-top">
    <div class="banner">
      <a href="/">
        <h1 class="title">RISHI STUDIO</h1>
      </a>
      <div class="icons">
        <a href="/user/cart"><i class="fa fa-shopping-cart"></i></a>
        <a href="/user/wishlist"><i class="fa fa-heart"></i></a>
        <a href="/user/profile"><i class="fa fa-user"></i></a>
        <a href="/user/logout"><i class="fa fa-power-off"></i></a>
      </div>
    </div>
  </div>

  <!-- NAVIGATION ENDS -->
  <div class="container mt-4">
    <h1 class="text-center pt-5">Order Checkout</h1>
    <form id="checkoutForm" action="/user/placeorder" method="POST" onsubmit="return validateForm()">
      <div class="row mt-3">
        <div class="col-half pr-1">
          <!-- Product Section -->
          <div class="order-details">
            <h3>Your Order</h3>
            <hr />
            <div class="cart-items">
              <% usercart.product.forEach(cartItem=> { %>
                <div class="card">
                  <div class="card-body">
                    <div class="row align-items-center">
                      <div class="col-md-2">
                        <img src="/<%= cartItem.productId.images[0] %>" alt="Product Image"
                          class="img-fluid object-fit-cover" />
                      </div>
                      <div class="col-md-8 d-flex">
                        <h5 class="card-title mr-2">
                          <%= cartItem.productId.p_name %>
                        </h5>
                        <p>Qty: <%= cartItem.quantity %> || Total Price: <%= (cartItem.productId.total_price *
                              cartItem.quantity) %>
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                <% }) %>
            </div>
          </div>
          <!-- Address Selection -->
          <div class="address-selection mt-2">
            <h3>Choose Address</h3>
            <hr>
            <div class="form-scroll">
              <div class="form-check">
                <% address.forEach((addr, i)=>{ %>
                  <input class="form-check-input" value="<%= addr._id %>" type="radio" name="address" value="address1">
                  <label class="form-check-label" for="address1">
                    <h3>
                      <%= addr.name %>
                    </h3>
                    Address <%= ++i %>: <%= addr.address %>,<%= addr.state %>, <%= addr.pincode %>
                  </label> <br><br>
                  <% }) %>
              </div>
            </div>
            <a href="/user/addaddress"><button class="btn btn-warning" onclick="goToAddAddress()">Add
                Address</button></a>
          </div>
        </div>
        <div class="col-half">
          <!-- Grand Total -->
          <div class="total-amount mb-1 col-md-6 col-lg-12">
            <h3>Grand Total</h3>
            <hr />
            <p><strong>Total Amount: $<%= usercart.subtotal %></strong></p>
            <p style="display: none;" class="coupon-amount"><strong>Grand Total after applying coupon : $<span
                  id="grandTotalDisplay"></span></strong></p>
          </div>
          <!-- Coupons -->
          <div class="total-amount mt-2 mb-1 col-md-6 col-lg-12">
            <h3>Coupons</h3>
            <hr />
            <div class="position-relative">
              <input id="couponInput" name="coupon" class="form-outline-inline" type="text" autocomplete="off">
              <!-- Adjusted CSS for the dropdown menu -->
              <div id="couponDropdown" class="dropdown-menu position-absolute"
                style="top: 100%; left: 0; width: 50%; overflow: auto; display: none; z-index: 100;">
                <!-- Dropdown menu content -->
              </div>
            </div>
            <button type="button" id="applyButton" class="btn btn-warning mt-2 ms-2">Apply</button>
            <button type="button" id="removeButton" class="btn btn-danger mt-2 ms-2"
              style="display: none;">Remove</button>
            <div id="couponAppliedMessage" style="display: none;" class="mt-2 text-success">Coupon applied!</div>
          </div>

          <script>
            document.addEventListener('DOMContentLoaded', function () {
              const applyButton = document.getElementById('applyButton');
              const couponInput = document.getElementById('couponInput');

              // Function to enable or disable the apply button based on the input field's value
              function toggleApplyButton() {
                if (couponInput.value.trim().length > 0) {
                  applyButton.disabled = false; // Enable the apply button
                } else {
                  applyButton.disabled = true; // Disable the apply button
                }
              }

              // Add event listeners for input and change events on the coupon input field
              couponInput.addEventListener('input', toggleApplyButton);
              couponInput.addEventListener('change', toggleApplyButton);

              // Call the toggleApplyButton function initially to set the initial state of the apply button
              toggleApplyButton();
            });

          </script>

          <!-- Payment Method -->
          <div class="payment-method mt-2 col-md-6 col-lg-12">
            <h3>Payment Method</h3>
            <hr />
            <div class="form-check">
              <% if (usercart.subtotal <=1000) { %>
                <input class="form-check-input" type="radio" name="paymentMethod" value="COD" />
                <label class="form-check-label" for="COD">
                  Cash On Delivery
                </label>
                <% } else { %>
                  <label class="form-check-label" style="color: red;">`
                  </label>
                  <% } %>
                    <br>
                    <input class="form-check-input" type="radio" name="paymentMethod" value="RazorPay" />
                    <label class="form-check-label" for="razorPay">
                      RazorPay
                    </label>
                    <br>
                    <% if (usercart.subtotal <=wallet) { %>
                      <input class="form-check-input" type="radio" name="paymentMethod" value="Wallet" />
                      <label class="form-check-label" for="wallet">
                        Wallet (Remaining: $<%= wallet %>)
                      </label>
                      <% } else { %>
                        <label class="form-check-label" style="color: red;">
                          Wallet (Insufficient Balance: $<%= wallet %>)
                        </label>
                        <% } %>
            </div>
          </div>
          <!-- Place Order Button -->
        </div>
        <button type="submit" class="btn btn-primary btn-place-order" id="placeOrderBtn">Place
          Order</button>

    </form>
    <!-- Razorpay checkout form -->
    <div class="row">
      <div class="col-md-6 d-flex justify-content-center align-items-center">
        <form id="razorpay-form" style="display: none;" action="/razorpay/pay/<%=usercart._id %>" method="POST">
          <div class="address-selection-razorpay mt-2">
            <h3>Choose Address</h3>
            <hr>
            <div class="form-scroll">
              <div class="form-check">
                <% address.forEach((addr, i)=>{ %>
                  <input class="form-check-input" value="<%= addr._id %>" type="radio" name="address" value="address1">
                  <label class="form-check-label" for="address1">
                    <h3>
                      <%= addr.name %>
                    </h3>
                    Address <%= ++i %>: <%= addr.address %>,<%= addr.state %>, <%= addr.pincode %>
                  </label> <br><br>
                  <% }) %>
              </div>
            </div>            
          <a href="/user/addaddress"><button class="btn btn-warning" onclick="goToAddAddress()">Add
              Address</button></a>
      </div>
      <input type="hidden" name="cartId" value="<%= usercart._id %>">
      <script src="https://checkout.razorpay.com/v1/checkout.js" data-key="<%= razorpayKeyId %>"
        data-amount="<%= usercart.subtotal * 100 %>" data-currency="INR" data-buttontext="" data-name="RISHI STUDIO"
        data-description="Payment for Order <%= usercart._id %>" data-prefill.name="<%= username.name %>"
        data-prefill.email="<%= username.email %>">
        </script>
      <button id="rzp-button" class="btn btn-primary ">Pay with
        Razorpay</button>
      </form>
    </div>
  </div>
  </div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      var placeOrderBtn = document.getElementById('placeOrderBtn');
      var razorpayForm = document.getElementById('razorpay-form');
      var paymentMethodInputs = document.querySelectorAll('input[name="paymentMethod"]');
      var checkoutForm = document.getElementById('checkoutForm');
      var couponInput = document.getElementById('couponInput');
      var grandTotalDisplay = document.getElementById('grandTotalDisplay');

      function toggleSubmitButtons(isRazorPay) {
        if (isRazorPay) {
          placeOrderBtn.style.display = 'none';
          razorpayForm.style.display = 'block';
        } else {
          placeOrderBtn.style.display = 'block';
          razorpayForm.style.display = 'none';
        }
      }

      paymentMethodInputs.forEach(function (input) {
        input.addEventListener('change', function () {
          toggleSubmitButtons(input.value === 'RazorPay');
        });
      });

      function isAddressSelected() {
        var selectedAddress = document.querySelector('input[name="address"]:checked');
        return selectedAddress !== null;
      }

      placeOrderBtn.addEventListener('click', function (event) {
        if (!isAddressSelected()) {
          event.preventDefault(); // Prevent form submission
          alert('Please select an address.');
        }
      });

      checkoutForm.addEventListener('submit', function (event) {
        if (!isAddressSelected()) {
          event.preventDefault(); // Prevent form submission
          alert('Please select an address.');
        } else {
          var formAction = checkoutForm.action;
          var selectedAddress = document.querySelector('input[name="address"]:checked');
          var addressValue = selectedAddress.value;
          formAction += '?address=' + encodeURIComponent(addressValue);
          if (couponInput.value) {
            formAction += '&coupon=' + encodeURIComponent(couponInput.value);
          }
          checkoutForm.action = formAction;
        }
      });

      razorpayForm.addEventListener('submit', function (event) {
        var amountToPay = usercart.subtotal * 100; // Default amount to pay
        if (grandTotalDisplay.textContent !== '') {
          amountToPay = parseFloat(grandTotalDisplay.textContent) * 100;
        }
        document.querySelector('input[name="amount"]').setAttribute('value', amountToPay);
      });
    });
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', function () {

      const applyButton = document.getElementById('applyButton');
      const removeButton = document.getElementById('removeButton');

      applyButton.addEventListener('click', function () {
        applyCoupon(); // Call the applyCoupon function when the button is clicked
      });

      removeButton.addEventListener('click', function () {
        removeCoupon(); // Call the removeCoupon function when the remove button is clicked
      });

      // Your JavaScript code here
      const couponInput = document.getElementById('couponInput');
      const couponDropdown = document.getElementById('couponDropdown');
      const grandTotalDisplay = document.getElementById('grandTotalDisplay');
      const totalAmountContainer = document.querySelector('.coupon-amount');
      const couponAppliedMessage = document.getElementById('couponAppliedMessage');

      let debounceTimeout;
      let couponApplied = false; // Flag to track if coupon is applied

      function applyCoupon() {
        const appliedCoupon = couponInput.value.trim();
        console.log(appliedCoupon, "hellooo")
        fetch(`/user/checkcoupon?code=${appliedCoupon}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        })
          .then(response => response.json())
          .then(data => {
            console.log('Coupon Check Response:', data);
            if (data.valid && data.codes.length > 0) {
              // Check if the coupon meets the minimum purchase amount criteria
              applyCouponDiscount(data.codes[0]); // Apply coupon discount immediately
            } else {
              // Coupon does not exist or is not valid
              couponInput.value = '';
              Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Invalid coupon or no coupon exists!',
              });
              couponApplied = false; // Reset flag
            }
          })
          .catch(error => console.error('Error:', error));
      }

      // Listen for changes in coupon input value to re-enable input and apply button if couponApplied flag is true
      couponInput.addEventListener('input', function () {
        if (couponApplied) {
          couponAppliedMessage.style.display = 'none';
          totalAmountContainer.style.display = 'none';
          couponApplied = false; // Reset flag
          couponInput.disabled = false; // Re-enable input
          applyButton.disabled = false; // Re-enable apply button
        }
      });

      couponInput.addEventListener('input', function (event) {
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(() => {
          const inputValue = event.target.value.trim();
          if (inputValue.length > 0) {
            fetch(`/user/checkcoupon?code=${inputValue}`, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json'
              }
            })
              .then(response => response.json())
              .then(data => {
                console.log('Response from backend:', data);
                if (data.valid && data.codes.length > 0) {
                  displayDropdownItems(data.codes);
                } else {
                  displayNoMatchingCoupons(); // Display "No matching coupons" message
                }
              })
              .catch(error => console.error('Error:', error));
          } else {
            hideCouponDropdown(); // Hide dropdown when input is empty
          }
        }, 300);
      });

      function displayDropdownItems(coupons) {
        couponDropdown.innerHTML = '';
        coupons.forEach(coupon => {
          const couponItem = document.createElement('div');
          couponItem.classList.add('dropdown-item');
          couponItem.textContent = `${coupon.code} - Discount: ${coupon.discountAmount}, Min Amount: ${coupon.minimumPurchaseAmount}`;
          couponItem.addEventListener('click', () => {
            couponInput.value = coupon.code;
            hideCouponDropdown();
          });
          couponDropdown.appendChild(couponItem);
        });
        couponDropdown.style.display = 'block'; // Show dropdown
      }

      function displayNoMatchingCoupons() {
        couponDropdown.innerHTML = '';
        const noMatchItem = document.createElement('div');
        noMatchItem.classList.add('dropdown-item', 'text-muted');
        noMatchItem.textContent = 'No matching coupons';
        couponDropdown.appendChild(noMatchItem);
        couponDropdown.style.display = 'block'; // Show dropdown with message
      }

      function hideCouponDropdown() {
        couponDropdown.innerHTML = '';
        couponDropdown.style.display = 'none'; // Hide dropdown
      }

      function applyCouponDiscount(coupon) {
        // Apply coupon discount to grand total if conditions are met
        const grandTotal = parseFloat('<%= usercart.subtotal %>'); // Get grand total from EJS as a string
        const minAmount = parseFloat(coupon.minimumPurchaseAmount);
        const discountAmount = parseFloat(coupon.discountAmount);
        // console.log(grandTotal, minAmount, discountAmount);

        if (grandTotal >= minAmount) {
          const discountedTotal = grandTotal - discountAmount;
          console.log(discountedTotal);

          // Update data-amount attribute in Razorpay script
          const razorpayScript = document.querySelector('script[data-key="<%= razorpayKeyId %>"]');
          if (razorpayScript) {
            razorpayScript.setAttribute('data-amount', discountedTotal * 100); // Convert to paisa (cents)
            console.log(razorpayScript.data-amount)
          }
          // Update the displayed total on the frontend
          grandTotalDisplay.innerHTML = `${discountedTotal.toFixed(2)}`;
          totalAmountContainer.style.display = 'block'; // Show total amount container
          couponAppliedMessage.style.display = 'block'; // Show coupon applied message
          couponApplied = true; // Set flag to true

          // Disable input and apply button
          couponInput.readOnly = true;
          applyButton.style.display = 'none'; // Hide apply button
          removeButton.style.display = 'block'; // Show remove button
        } else {
          // Display error message if minimum purchase amount condition is not met
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: `Minimum purchase amount of $${minAmount} is required to apply this coupon!`,
          });
          couponApplied = false; // Reset flag
        }
      }

      function removeCoupon() {

        // Restore data-amount in Razorpay script to original subtotal
        const originalAmount = '<%= usercart.subtotal * 100 %>';
        const razorpayScript = document.querySelector('script[data-key="<%= razorpayKeyId %>"]');
        if (razorpayScript) {
          razorpayScript.setAttribute('data-amount', originalAmount);
        }

        couponInput.value = ''; // Clear coupon input field
        applyButton.style.display = 'block'; // Show apply button
        removeButton.style.display = 'none'; // Hide remove button
        couponAppliedMessage.style.display = 'none'; // Hide coupon applied message
        totalAmountContainer.style.display = 'none'; // Hide total amount container
        couponApplied = false; // Reset flag
        couponInput.readOnly = false;
      }


    });
  </script>

  <script>
    // Check if the cart is empty on page load
    window.addEventListener('DOMContentLoaded', () => {
      const cartItems = document.querySelectorAll('.cart-items .card');
      if (cartItems.length === 0) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: "Your cart is empty. Redirecting you to the landing page.",
          confirmButtonText: 'Ok'
        }).then(() => {
          // Redirect to landing page
          window.location.href = "/user/landing";
        });
      }
    });
  </script>

  <script>
    // Function to navigate to the Add Address page
    function goToAddAddress() {
      // Navigate to the specified URL
      window.location.href = "/user/addaddress";
    }

    function validateForm() {
      const checkoutForm = document.getElementById('checkoutForm');
      // Check if all required fields are filled
      if (!checkoutForm.checkValidity()) {
        // If not, show validation messages and prevent form submission
        checkoutForm.reportValidity();
        return false;
      }

      // Check if a payment method is selected
      const paymentMethod = checkoutForm.querySelector('input[name="paymentMethod"]:checked');
      if (!paymentMethod) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: "Please select a payment method!",
          confirmButtonText: 'Ok'
        });
        return false;
      }

      // Check if an address is selected
      const selectedAddress = checkoutForm.querySelector('input[name="address"]:checked');
      if (!selectedAddress) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: "Please select an address!",
          confirmButtonText: 'Ok'
        });
        return false;
      }

      // All validations passed, allow form submission
      return true;
    }
  </script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
</body>

</html>